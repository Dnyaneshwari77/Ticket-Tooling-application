import React, { useEffect, useState } from "react";
import Ticket from "./Ticket";
import { useDispatch, useSelector } from "react-redux";
import { getAllTickets, getFilterTickets, } from "../../features/ticket/ticketAction";
import TicketDetail from "../User/TicketDetail";
import { motion } from "framer-motion";
import { Box } from "@chakra-ui/react";
import FilterComponent from "../common/FilterComponent";

//Component To manage All Tickets Generated by user
export default function AllTickets() {
  const dispatch = useDispatch();
  const [selectedTicket, setSelectedTicket] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // using dispatch called to getAllTickets Action
  const loadTickets = () => {
    dispatch(getAllTickets());
  };

  const loadFillterTickets=()=>
    {
      dispatch(getFilterTickets({status:"all"}));
    }
  // Get current User Tickets from Database
  const currentTickets = useSelector(
    (state) => state.ticket.currrentUserTicket
  );

  const fillterTickets=useSelector((state)=>state.ticket.filterTickets);

  // List of ticket created by user just after login
  const ticket = useSelector((state) => state.ticket.tickets);  

  useEffect(() => {
    loadTickets();
  }, [ticket]);

  useEffect(()=>
  {
    loadFillterTickets();
  },[currentTickets])

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedTicket(null);
  };
  const handleTokenClick = (ticket) => {
    console.log("Tocken clicked");
    setSelectedTicket(ticket);
    setIsModalOpen(true);
  };

  const container = {
    hidden: { opacity: 1, scale: 0 },
    visible: {
      opacity: 1,
      scale: 1,
      transition: {
        delayChildren: 0.3,
        staggerChildren: 0.2,
      },
    },
  };

  const item = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 },
  };

  return (
  <Box width={"100%"}>
 <FilterComponent/>
    <motion.div
      variants={container}
      initial="hidden"
      animate="visible"
      style={{
        width: "100%",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        flexDirection: "column",
      }}
    >
   
      { fillterTickets && fillterTickets.map((ticket) => (
          <motion.div
            key={ticket._id}
            style={{
              width: '100%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            <Ticket ticket={ticket} onClick={() => handleTokenClick(ticket)} />
          </motion.div>
        ))
      }

      {(fillterTickets && fillterTickets.length === 0) && (
        <div>No tickets available</div>
      )}
      
      
      {selectedTicket && (
        // Component to show Ticket Deatail
        <TicketDetail
          isOpen={isModalOpen}
          onClose={closeModal}
          ticket={selectedTicket}
        />
      )}
    </motion.div></Box>
  );
}
